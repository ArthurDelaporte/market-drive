import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";
import prisma from "@/prismaClient";
import { jwtDecode } from "jwt-decode";

// Configuration de l'API OpenAI
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export async function POST(req: NextRequest) {
    try {
        // üîë R√©cup√©ration manuelle du cookie c√¥t√© serveur
        const accessToken = req.cookies.get("access_token")?.value;

        if (!accessToken) {
            return NextResponse.json({ error: "Utilisateur non authentifi√©" }, { status: 401 });
        }

        // üîç D√©codage du token JWT pour r√©cup√©rer l'ID utilisateur
        const decoded = jwtDecode<{ sub: string }>(accessToken);
        const userId = decoded?.sub;

        if (!userId) {
            return NextResponse.json({ error: "ID utilisateur introuvable" }, { status: 400 });
        }

        // üîπ Recherche du panier de l'utilisateur
        const cart = await prisma.carts.findFirst({
            where: { user_id: userId, status: "waiting" },
            select: { products: true },
        });

        if (!cart || !cart.products.length) {
            return NextResponse.json({ error: "Votre panier est vide." }, { status: 404 });
        }

        // üîπ Extraction des noms des produits dans le panier
        const productIds = cart.products.map(p => p.product_id);
        const productsInCart = await prisma.products.findMany({
            where: { id: { in: productIds } },
            select: { name: true },
        });

        // üîπ Requ√™te GPT pour obtenir des recettes
        const response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
                {
                    role: "system",
                    content: "Tu es un assistant culinaire. Propose 2 recettes en utilisant au mieux les ingr√©dients fournis.",
                },
                {
                    role: "user",
                    content: `Ingr√©dients disponibles : ${productsInCart.map(p => p.name).join(", ")}.  
                    Propose 2 recettes. Pour chaque recette, indique :  
                    - üõí Ingr√©dients disponibles (dans le panier)  
                    - üöö Ingr√©dients manquants mais disponibles au magasin  
                    - üö´ Ingr√©dients totalement indisponibles (non vendus par le magasin)  
                    - üîç Instructions √©tape par √©tape  

                    üçΩÔ∏è **Format attendu :**  
                    1Ô∏è‚É£ **Nom de la recette 1**  
                    - üõí **Disponibles :** ...  
                    - üöö **Manquants disponibles :** ...  
                    - üö´ **Manquants indisponibles :** ...  
                    - üîç **Instructions :** ...  

                    2Ô∏è‚É£ **Nom de la recette 2**  
                    - üõí **Disponibles :** ...  
                    - üöö **Manquants disponibles :** ...  
                    - üö´ **Manquants indisponibles :** ...  
                    - üîç **Instructions :** ...  

                    Sois clair et concis.  
                    Bon app√©tit ! üçΩÔ∏è`
                }
            ],
        });

        // üîπ R√©cup√©ration de la r√©ponse GPT
        const result = response.choices[0].message?.content;

        // üîç Analyse des ingr√©dients manquants
        const missingIngredients = result?.match(/Ingr√©dients manquants.*?: (.+)/g) || [];
        const extractedItems = missingIngredients.flatMap(line => 
            line.replace(/Ingr√©dients manquants.*?: /, '').split(',').map(item => item.trim())
        );

        // üîπ V√©rification des ingr√©dients dans la base de donn√©es
        const knownProducts = await prisma.products.findMany({ select: { name: true } });
        const knownNames = new Set(knownProducts.map(p => p.name));

        const missingAvailable = extractedItems.filter(item => knownNames.has(item));
        const missingUnavailable = extractedItems.filter(item => !knownNames.has(item));

        // üîπ R√©ponse finale
        return NextResponse.json({
            recipe: result,
            ingredients: {
                produitsDansPanier: productsInCart.map(p => p.name),
                manquantsDisponibles: missingAvailable,
                manquantsIndisponibles: missingUnavailable
            }
        });

    } catch (error) {
        console.error("‚ùå Erreur avec OpenAI :", error);
        return NextResponse.json({ error: "Erreur lors de la g√©n√©ration de la recette avec OpenAI" }, { status: 500 });
    }
}
