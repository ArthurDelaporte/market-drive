import { NextResponse } from "next/server";
import prisma from "@/prismaClient";
import { supabase } from "@/supabaseClient";
import { jwtDecode } from "jwt-decode";

export async function GET(request: Request) {
    try {
        // ‚úÖ 1Ô∏è‚É£ R√©cup√©rer l'access_token depuis les cookies (CORRIG√â)
        const accessToken = request.cookies.get("access_token")?.value;

        if (!accessToken) {
            console.error("‚ùå [Auth API] Aucun access_token trouv√© dans les cookies !");
            return NextResponse.json({ error: "Access token missing" }, { status: 401 });
        }

        console.log("üìå [Auth API] Access token d√©tect√© :", accessToken);

        // ‚úÖ 2Ô∏è‚É£ V√©rifier que le token est valide
        try {
            const decodedToken = jwtDecode<{ exp: number }>(accessToken);
            const currentTime = Math.floor(Date.now() / 1000);

            if (decodedToken.exp <= currentTime) {
                console.warn("‚ö†Ô∏è [Auth API] Token expir√© !");
                return NextResponse.json({ error: "Access token expired" }, { status: 401 });
            }
        } catch (decodeError) {
            console.error("‚ùå [Auth API] Erreur lors du d√©codage du token :", decodeError);
            return NextResponse.json({ error: "Invalid access token" }, { status: 401 });
        }

        // ‚úÖ 3Ô∏è‚É£ V√©rifier l'utilisateur avec Supabase
        const { data, error } = await supabase.auth.getUser(accessToken);

        if (error || !data?.user?.id) {
            console.error("‚ùå [Auth API] Erreur avec Supabase :", error);
            return NextResponse.json({ error: "Invalid or expired access token" }, { status: 401 });
        }

        console.log("‚úÖ [Auth API] Utilisateur trouv√© via Supabase :", data.user.id);

        // ‚úÖ 4Ô∏è‚É£ R√©cup√©rer les informations utilisateur depuis Prisma
        const dbUser = await prisma.users.findUnique({
            where: { id: data.user.id },
            select: {
                id: true,
                firstname: true,
                lastname: true,
                birthdate: true,
                email: true,
                role: true,
            },
        });

        if (!dbUser) {
            console.error("‚ùå [Auth API] Utilisateur introuvable en base de donn√©es !");
            return NextResponse.json({ error: "User not found in database" }, { status: 404 });
        }

        console.log("‚úÖ [Auth API] Donn√©es utilisateur trouv√©es :", dbUser);

        // ‚úÖ 5Ô∏è‚É£ R√©ponse avec les donn√©es utilisateur
        return NextResponse.json(dbUser, { status: 200 });

    } catch (error) {
        console.error("‚ùå [Auth API] Erreur serveur :", error);
        return NextResponse.json({ error: "Internal server error" }, { status: 500 });
    }
}
