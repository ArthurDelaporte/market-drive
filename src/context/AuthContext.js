"use client";

import { createContext, useContext, useState, useEffect } from "react";
import { createClient } from "@supabase/supabase-js";
import { getCookie, removeCookie } from "typescript-cookie";

const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        console.log("üü¢ [AuthContext] V√©rification de la session en cours...");

        (async () => {
            const session = await supabase.auth.getSession();
            console.log("üîç [Auth Debug] Session r√©cup√©r√©e au chargement :", session);
        })();        

        console.log("üîç [Auth Debug] Refresh Token dans les cookies :", getCookie("refresh_token"));


        const checkSessionAndLogin = async () => {
            try {
                // üîç V√©rifier si un token est dans les cookies
                const accessToken = getCookie("access_token");
        
                if (!accessToken) {
                    console.warn("‚ö†Ô∏è [AuthContext] Aucun access_token trouv√©, utilisateur non connect√©.");
                    setUser(null);
                    setLoading(false);
                    return;
                }
        
                console.log("‚úÖ [AuthContext] Access token d√©tect√© :", accessToken);
        
                // üîÑ R√©cup√©rer l'utilisateur avec Supabase
                let { data: { user }, error } = await supabase.auth.getUser();
        
                if (error || !user) {
                    console.warn("‚ö†Ô∏è [AuthContext] Session absente ou invalide, tentative de rafra√Æchissement...");
        
                    // üåü Rafra√Æchir la session si elle est expir√©e ou absente
                    const response = await fetch("/api/auth/refresh", { method: "POST" });
                    const refreshedSession = await response.json();
        
                    if (refreshedSession.error || !refreshedSession.session) {
                        console.error("‚ùå [AuthContext] Impossible de r√©cup√©rer une session valide apr√®s rafra√Æchissement :", refreshedSession.error);
                        removeCookie("access_token");
                        setUser(null);
                    } else {
                        console.log("‚úÖ [AuthContext] Session rafra√Æchie avec succ√®s !");
                        setUser(refreshedSession.session.user);
                    }
                    
                } else {
                    console.log("‚úÖ [AuthContext] Utilisateur reconnect√© :", user.id);
                    setUser(user);
                }
            } catch (err) {
                console.error("‚ùå [AuthContext] Erreur inattendue :", err);
                setUser(null);
            }
        
            setLoading(false);
        };
        

        checkSessionAndLogin();

        (async () => {
            const { data, error } = await supabase.auth.refreshSession();
            console.log("üîÑ [Auth Debug] Tentative de rafra√Æchissement de la session :", data, error);
        })();
        

        // üöÄ Gestion des changements d'√©tat d'authentification
        const { data: authListener } = supabase.auth.onAuthStateChange(async (event, session) => {
            console.log("üîÑ [AuthContext] Changement d'√©tat :", event);
        
            if (session?.user) {
                console.log("‚úÖ [AuthContext] Connexion d√©tect√©e, r√©cup√©ration de l'utilisateur...");
                const { data: userData, error } = await supabase.auth.getUser();
                
                if (error || !userData?.user) {
                    console.warn("‚ö†Ô∏è [AuthContext] Impossible de r√©cup√©rer l'utilisateur.");
                    setUser(null);
                } else {
                    console.log("‚úÖ [AuthContext] Utilisateur mis √† jour :", userData.user.id);
                    setUser(userData.user);
                }
            } else {
                console.warn("‚ö†Ô∏è [AuthContext] D√©connexion d√©tect√©e !");
                
                // üîÑ Demander au serveur de supprimer les cookies (si HttpOnly)
                await fetch("/api/auth/logout", { method: "POST" });
        
                removeCookie("access_token");
                setUser(null);
            }
        });
        

        console.log("üõë [AuthContext] Listener sur l'authentification initialis√© !");

        return () => {
            if (authListener && authListener.subscription) {
                authListener.subscription.unsubscribe();
                console.log("üîå [AuthContext] Listener nettoy√©.");
            }
        };
    }, []);

    // üö™ Fonction propre pour g√©rer la d√©connexion
    const signOut = async () => {
        try {
            await supabase.auth.signOut();
            removeCookie("access_token");
            setUser(null);
            console.log("üö™ [AuthContext] D√©connexion r√©ussie, token supprim√© !");
        } catch (error) {
            console.error("‚ùå [AuthContext] Erreur lors de la d√©connexion :", error);
        }
    };

    return (
        <AuthContext.Provider value={{ user, setUser, loading, signOut }}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => useContext(AuthContext);
