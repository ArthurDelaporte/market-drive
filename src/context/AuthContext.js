"use client";

import { createContext, useContext, useState, useEffect } from "react";
import { createClient } from "@supabase/supabase-js";
import { getCookie, removeCookie } from "typescript-cookie";
import { useRouter } from "next/navigation";

const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
        persistSession: false, // üîπ D√©sactiver la persistance automatique
        autoRefreshToken: false, // üîπ Supprimer toute gestion automatique de refresh token
    }
);

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        console.log("üü¢ [AuthContext] V√©rification de la session en cours...");

        const checkSessionAndLogin = async () => {
            try {
                // üîç V√©rifier si un access_token est stock√© en cookie
                const accessToken = getCookie("access_token");

                if (!accessToken) {
                    console.warn("‚ö†Ô∏è [AuthContext] Aucun access_token trouv√©, utilisateur non connect√©.");
                    setUser(null);
                    setLoading(false);
                    return;
                }

                console.log("‚úÖ [AuthContext] Access token d√©tect√© :", accessToken);

                // üîÑ R√©cup√©rer l'utilisateur avec Supabase
                const { data: { user }, error } = await supabase.auth.getUser();

                if (error || !user) {
                    console.error("‚ùå [AuthContext] Session expir√©e ou invalide. L'utilisateur doit se reconnecter.");
                    removeCookie("access_token"); // üîπ Supprimer le cookie expir√©
                    setUser(null);
                } else {
                    console.log("‚úÖ [AuthContext] Utilisateur valide :", user.id);
                    setUser(user);
                }
            } catch (err) {
                console.error("‚ùå [AuthContext] Erreur inattendue :", err);
                setUser(null);
            }

            setLoading(false);
        };

        checkSessionAndLogin();

        // üöÄ √âcoute les changements d'√©tat d'authentification
        const { data: authListener } = supabase.auth.onAuthStateChange((event, session) => {
            console.log("üîÑ [AuthContext] Changement d'√©tat :", event);

            if (session?.user) {
                console.log("‚úÖ [AuthContext] Connexion d√©tect√©e :", session.user.id);
                setUser(session.user);
            } else {
                console.warn("‚ö†Ô∏è [AuthContext] D√©connexion d√©tect√©e !");
                removeCookie("access_token");
                setUser(null);
            }
        });

        console.log("üõë [AuthContext] Listener sur l'authentification initialis√© !");

        return () => {
            if (authListener && authListener.subscription) {
                authListener.subscription.unsubscribe();
                console.log("üîå [AuthContext] Listener nettoy√©.");
            }
        };
    }, []);

    // üö™ Fonction propre pour g√©rer la d√©connexion
    const signOut = async () => {
        try {
            const router = useRouter();
            await supabase.auth.signOut();
            removeCookie("access_token");
            setUser(null);
            console.log("üö™ [AuthContext] D√©connexion r√©ussie !");
            router.replace("/connexion");
        } catch (error) {
            console.error("‚ùå [AuthContext] Erreur lors de la d√©connexion :", error);
        }
    };

    return (
        <AuthContext.Provider value={{ user, setUser, loading, signOut }}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => useContext(AuthContext);
